// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String   @db.VarChar(255)
  lastName  String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  address   String   @db.VarChar(255)
  phone     String   @db.VarChar(255)
  status    Boolean
  photoUrl  String   @db.VarChar(255)
  password  String   @db.VarChar(255)
  role      Role     @default(Admin)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  Apprenant     Apprenant?
  Mentor        Mentor?
  Partenaire    Partenaire?
  Posts         Post[]
  Notifications Notification[]
  messagesSent  Message[] @relation("SenderMessages")
  messagesReceived Message[] @relation("ReceiverMessages")
}

model Apprenant {
  id            Int          @id @default(autoincrement())
  bio           String
  profession    String       @db.VarChar(100)
  lastConnected DateTime     @db.Timestamp(6)
  enrolledAt    DateTime     @default(now()) @db.Timestamp(6)
  userId        Int          @unique
  user          User         @relation(fields: [userId], references: [id])
  inscriptions  Inscription[]
  certificats   Certificat[]
  notifications Notification[]
}

model Mentor {
  id            Int          @id @default(autoincrement())
  specialite    String       @db.VarChar(255)
  experience    String       @db.VarChar(255)
  bio           String
  lastConnected DateTime     @db.Timestamp(6)
  userId        Int          @unique
  user          User         @relation(fields: [userId], references: [id])
  cours         Cours[]
  notifications Notification[]
}

model Partenaire {
  id              Int          @id @default(autoincrement())
  organisationName String      @db.VarChar(255)
  activitySector   String      @db.VarChar(255)
  juridicStatus    String      @db.VarChar(255)
  description      String
  siteweb          String      @db.VarChar(255)
  contact          String
  logoUrl          String      @db.VarChar(255)
  lastConnected    DateTime    @db.Timestamp(6)
  userId           Int         @unique
  user             User        @relation(fields: [userId], references: [id])
  posts            Post[]
  notifications    Notification[]
}

model Cours {
  id          Int       @id @default(autoincrement())
  titre       String    @db.VarChar(255)
  description String
  duree       Int
  status      String    @db.VarChar(100)
  imageUrl    String    @db.VarChar(255)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)

  mentorId    Int
  mentor      Mentor     @relation(fields: [mentorId], references: [id])
  inscriptions Inscription[]
  modules     Module[]
  certificats Certificat[]
  notifications Notification[]
}

model Module {
  id          Int       @id @default(autoincrement())
  titre       String    @db.VarChar(255)
  description String
  ordre       Int
  duree       Int
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @db.Timestamp(6)

  coursId     Int
  cours       Cours     @relation(fields: [coursId], references: [id])
  lessons     Lesson[]
  quizzes     Quiz[]
}

model Lesson {
  id          Int       @id @default(autoincrement())
  titre       String    @db.VarChar(255)
  textContenu String
  duree       Int
  type        String    @db.VarChar(100)
  ordre       Int
  videoUrl    String    @db.VarChar(255)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @db.Timestamp(6)

  moduleId    Int
  module      Module    @relation(fields: [moduleId], references: [id])
}

model Quiz {
  id               Int       @id @default(autoincrement())
  titre            String    @db.VarChar(255)
  description      String
  dureeMax         Int
  nombreTentatives Int
  scoreMinReussite Int
  type             String    @db.VarChar(100)
  createdAt        DateTime  @default(now()) @db.Timestamp(6)
  updatedAt        DateTime  @updatedAt @db.Timestamp(6)

  moduleId         Int
  module           Module    @relation(fields: [moduleId], references: [id])
  questions        Question_quiz[]
}

model Question_quiz {
  id           Int       @id @default(autoincrement())
  questionText String    @db.VarChar(255)
  ordre        Int
  points       Int
  typeQuestion String    @db.VarChar(100)
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  updatedAt    DateTime  @updatedAt @db.Timestamp(6)

  quizId       Int
  quiz         Quiz      @relation(fields: [quizId], references: [id])
  options      Option_reponse[]
  reponses     Reponse_correct[]
}

model Option_reponse {
  id          Int       @id @default(autoincrement())
  optionText  String    @db.VarChar(255)
  isCorrect   Boolean
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @db.Timestamp(6)

  questionId  Int
  question    Question_quiz @relation(fields: [questionId], references: [id])
}

model Reponse_correct {
  id          Int       @id @default(autoincrement())
  reponseText String    @db.VarChar(255)
  isCorrect   Boolean
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @db.Timestamp(6)

  questionId  Int
  question    Question_quiz @relation(fields: [questionId], references: [id])
}

model Inscription {
  id               Int       @id @default(autoincrement())
  inscriptionDate  DateTime  @default(now()) @db.Timestamp(6)
  status           String    @db.VarChar(100)
  dateFin          DateTime  @db.Timestamp(6)
  progression      Int

  apprenantId      Int
  coursId          Int
  cours            Cours     @relation(fields: [coursId], references: [id])
  apprenant        Apprenant @relation(fields: [apprenantId], references: [id])
}

model Certificat {
  id           Int       @id @default(autoincrement())
  titre        String    @db.VarChar(255)
  description  String
  dateEmission DateTime  @default(now()) @db.Timestamp(6)
  validUntil   DateTime  @db.Timestamp(6)
  imageUrl     String    @db.VarChar(255)
  status       String    @db.VarChar(100)

  apprenantId  Int
  coursId      Int
  apprenant    Apprenant @relation(fields: [apprenantId], references: [id])
  cours        Cours     @relation(fields: [coursId], references: [id])
}

model Post {
  id              Int       @id @default(autoincrement())
  title           String    @db.VarChar(255)
  content         String
  datePublication DateTime  @default(now()) @db.Timestamp(6)
  dateExpiration  DateTime  @db.Timestamp(6)
  imageUrl        String    @db.VarChar(255)
  typeOportunite  String    @db.VarChar(100)
  status          String    @db.VarChar(100)
  createdAt       DateTime  @default(now()) @db.Timestamp(6)
  updatedAt       DateTime  @updatedAt @db.Timestamp(6)

  partenaireId    Int
  userId          Int
  partenaire      Partenaire @relation(fields: [partenaireId], references: [id])
  user            User       @relation(fields: [userId], references: [id])
  notifications   Notification[]
}

model Notification {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  content     String
  dateCreated DateTime  @default(now()) @db.Timestamp(6)
  isRead      Boolean   @default(false)

  userId        Int?
  postId        Int?
  coursId       Int?
  apprenantId   Int?
  mentorId      Int?
  partenaireId  Int?
  messageId     Int?

  user        User?        @relation(fields: [userId], references: [id])
  post        Post?        @relation(fields: [postId], references: [id])
  cours       Cours?       @relation(fields: [coursId], references: [id])
  apprenant   Apprenant?   @relation(fields: [apprenantId], references: [id])
  mentor      Mentor?      @relation(fields: [mentorId], references: [id])
  partenaire  Partenaire?  @relation(fields: [partenaireId], references: [id])
  message     Message?     @relation(fields: [messageId], references: [id])
}

model Message {
  id           Int       @id @default(autoincrement())
  content      String
  dateSent     DateTime  @default(now()) @db.Timestamp(6)
  senderId     Int
  receiverId   Int

  sender       User      @relation("SenderMessages", fields: [senderId], references: [id])
  receiver     User      @relation("ReceiverMessages", fields: [receiverId], references: [id])
  notifications Notification[]
}

enum Role {
  Admin
  Apprenant
  Mentor
  Partenaire
}
